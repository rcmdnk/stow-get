#!/usr/bin/env bash

## Description {{{
#
# Package manager with stow.
#
STOW_GET_VERSION=v0.0.1
STOW_GET_DATE="1/May/2017"
#
# }}}

# The MIT License (MIT) {{{
#
# Copyright (c) 2017 rcmdnk
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# }}}

# Fixed values {{{
EXIT_WRONG_ARG=100
EXIT_UNKNOWN_COMMAND=101
EXIT_NO_PACKAEGE=102
EXIT_CD_FAIL=103
EXIT_WRONG_BIN_DEP=104
EXIT_WRONG_LIB_DEP=105
EXIT_NO_PAC_CONF=106
EXIT_NO_VERSION=107
# }}}

# Default variables {{{
function set_default {
  inst_dir=$HOME/usr/local
  script_dir=$(cd "$(dirname "$0")";pwd)
  conf_dir="$script_dir/../share/stow-get"
  stow_dir="$inst_dir/stow"
  conf_file="$HOME/.stow-get"
  force=0
  packages=()
  verbose=0
}
set_default
# }}}

# Global variables for installation {{{
function reset_inst_val {
  version=""
  inst_type=""
  target=""
  url_prefix=""
  tarball=""
  directory=""
  before_configure=""
  configure="./configure"
  config_options=""

  bin_dep=()
  lib_dep=()


  unset stow_install
  function make_cmd {
    make all && make install
  }
}
reset_inst_val
# }}}

# functions {{{

function show_help { # {{{
  ret="$1"
  set_default
  echo "
Usage: stow-get <sub command> [-fVvh] [-c <conf file>] [-d <conf dir>] [-i <inst dir> ] [package [package [...]]]

Sub commands:
   install [package [package...]]
                  Install packages (all packages in the configuration file if no package is given).
   uninstall <package>
                  Remove package.
   rm/remove      Aliases of uninstall.
   info <package> Show configuration file of package.
   version        Show version.
   help           Show this help.

Arguments:
   -c <conf file> Configuration file (default: $conf_file).
   -d <conf dir>  Directory which has package configuration files (default: $conf_dir).
   -i <inst dir>  Directory to install packages (default: $inst_dir).
   -f             Force to re-install.
   -V             Verbose mode.
   -v             Show version.
   -h             Show this help.
"
  if [ "$ret" != "" ];then
    exit "$ret"
  fi
} ## }}}

function banner { ## {{{
  echo "####################################################################"
  echo "$@"
  echo "####################################################################"
} ## }}}

function err { ## {{{
  printf "\e[31m"
  banner "ERROR: $*"
  printf "\e[m"
  return 1
} ## }}}

function cd_check { ## {{{
  dir="$1"
  no_exit="$2"
  cd "$dir" || err "can not cd to $dir."; \
               if [ "$no_exit" = "" ];then \
                 exit $EXIT_CD_FAIL; \
               fi
} ## }}}

function get_pac_conf { # {{{
  conf="$conf_dir/${1}.sh"
  if [ ! -f "$conf" ];then
    err "No configuration file for $1 is found."
    exit $EXIT_NO_PAC_CONF
  fi
  echo "$conf"
} # }}}

function check_bin { ## {{{
  type -a "$1" >/dev/null 2>&1
} ## }}}

function check_lib { # {{{
  IFS_ORIG=$IFS
  IFS=$'\n'
  pathes=(${LD_LIBRARY_PATH//:/$'\n'})
  IFS=$IFS_ORIG
  for d in "${pathes[@]}";do
    if [ -f "$d/${1}.so" ] || [ -f "$d/${1}.a" ];then
      return 0
    fi
  done
  return 1
} # }}}

function get_tarball  { # {{{
  wget --no-check-certificate "$1"
  ret=$?
  if [ $ret -ne 0 ];then
    return $ret
  fi
  if echo "$1"|grep -q "tar.gz$";then
    tar xzf "${1##*/}"
  elif echo $tarball|grep -q "tar.xz$";then
    tar Jxf "${1##*/}"
  elif echo $tarball|grep -q "tar.bz2$";then
    tar jxf "${1##*/}"
  fi
} # }}}

function stow_install_tarball { ## {{{
  if [ "$tarball" = "" ];then
    tarball=${target}.tar.gz
  fi
  if [ "$directory" = "" ];then
    directory=${target}
  fi

  get_tarball "$url_prefix/$tarball"
  ret=$?
  if [ $ret -ne 0 ];then
    return $ret
  fi

  cd_check "$directory" 1
  ret=$?
  if [ $ret -ne 0 ];then
    return $ret
  fi

  eval "$before_configure"
  ret=$?
  if [ $ret -ne 0 ];then
    return $ret
  fi

  if [ "$configure" != "" ];then
    CFLAGS="-L$inst_dir/lib -I$inst_dir/include" \
      CPPFLAGS="-L$inst_dir/lib -I$inst_dir/include" \
      LDFLAGS="-L$inst_dir/lib" \
      "$configure" --prefix="$stow_dir/$target" "$config_options"
    ret=$?
    if [ $ret -ne 0 ];then
      return $ret
    fi
  fi

  make_cmd
} ## }}}

function stow_install_gnu { ## {{{
  if [ "$url_prefix" = "" ];then
    url_prefix=http://ftp.gnu.org/gnu/$package
  fi
  stow_install_tarball
} ## }}}

function stow_install_github { ## {{{
  if [ "$tarball" = "" ];then
    tarball=v${version}.tar.gz
  fi
  if [ "$url_prefix" = "" ];then
    url_prefix=https://github.com/$package/$package/archive
  fi
  stow_install_tarball
} ## }}}

function stow_install_github_direct { ## {{{
  if [ "$tarball" = "" ];then
    tarball=v${version}.tar.gz
  fi
  if [ "$url_prefix" = "" ];then
    url_prefix=https://github.com/$package/$package/archive
  fi
  configure=""
  function make_cmd {
    cp -r . "$stow_dir/$target"
  }
  stow_install_tarball
} ## }}}

function stow_install_wrapper { ## {{{
  if [ "$inst_type" = "tarball" ];then
    stow_install_tarball
  elif [ "$inst_type" = "gnu" ];then
    stow_install_gnu
  elif [ "$inst_type" = "github" ];then
    stow_install_github
  elif [ "$inst_type" = "github_direct" ];then
    stow_install_github_direct
  elif [ "$inst_type" != "" ];then
    err "Invalid inst_type: $inst_type"
    return 1
  else
    if ! eval type -a stow_install > /dev/null 2>&1;then
      err "Neither type nor stow_install is not defined for $package."
      return 1
    fi
    stow_install
  fi
} ## }}}

# }}} functions

# Check argumetns {{{
while getopts c:d:i:fVvh OPT;do
  case $OPT in
    "c" ) conf_file="$OPTARG" ;;
    "d" ) conf_dir="$OPTARG" ;;
    "i" ) inst_dir="$OPTARG" ;;
    "f" ) force=1 ;;
    "V" ) verbose=1 ;;
    "v" ) echo "$(basename "$0") $STOW_GET_VERSION $STOW_GET_DATE"; exit 0;;
    "h" ) show_help 0;;
    * ) echo "Check \"$(basename "$0") -h\" for more information" >/dev/tty;exit $EXIT_WRONG_ARG;;

  esac
done
shift $((OPTIND - 1))

COMMANDS=(install rm remove uninstall info help version)

if [ "$#" -eq 0 ] || [ "$1" = "help" ];then
  show_help 0
elif [ "$1" = "version" ];then
  echo "$(basename "$0") $STOW_GET_VERSION $STOW_GET_DATE"
  exit 0
fi

if ! echo " ${COMMANDS[*]} "|grep -q " $1 ";then
  err "Unknown command: $1"
  exit $EXIT_UNKNOWN_COMMAND
fi
command=$1
shift
if [ "$command" = "rm" ] || [ "$command" = "remove" ];then
  command="uninstall"
fi

if [ "$command" = "uninstall" ] || [ "$command" = "info" ];then
  if [ "$#" -eq 0 ];then
    err "Need <package> argument for $command command."
    exit $EXIT_NO_PACKAEGE
  fi
fi

# }}}

# Read configuration {{{
if [ -f "$conf_file" ];then
  source "$conf_file"
fi
if [ "$#" -ne 0 ];then
  packages=("$@")
fi
# }}}

# Info {{{
if [ "$command" = "info" ];then
  for package in "${packages[@]}";do
    conf=$(get_pac_conf "$package")
  done
  banner "Configuration for $package"
  cat "$conf"
fi
# }}}

# Check stow {{{
if ! type -a stow >/dev/null 2>&1;then
  packages=(stow "${packages[@]}")
fi
# }}}

# Dependency check {{{
i=0
while [ "$i" -lt "${#packages[@]}" ];do
  package="${packages[$i]}"
  reset_inst_val
  conf=$(get_pac_conf "$package")
  source "$conf"
  deps=0
  j=0
  while [ "$j" -lt ${#bin_dep[@]} ];do
    p=${bin_dep[j+1]}
    if [ "$p" = "" ];then
      err "Configuration file for $p has wrong bin_dep definition."
      exit $EXIT_WRONG_BIN_DEP
    fi
    if ! check_bin "${bin_dep[j]}";then
      if ! echo " ${packages[*]} "|grep -q " $p ";then
        packages=($(echo " ${packages[*]} "|sed 's/ $package / $p $package /'))
        deps=1
      fi
    fi
    j=$((j+2))
  done
  j=0
  while [ "$j" -lt ${#lib_dep[@]} ];do
    p=${lib_dep[j+1]}
    if [ "$p" = "" ];then
      err "Configuration file for $p has wrong lib_dep definition."
      exit $EXIT_WRONG_LIB_DEP
    fi
    if ! check_lib "${lib_dep[j]}";then
      if ! echo " ${packages[*]} "|grep -q " $p ";then
        packages=($(echo " ${packages[*]} "|sed 's/ $package / $p $package /'))
        deps=1
      fi
    fi
    j=$((j+2))
  done
  if [ $deps -eq 0 ];then
    ((i++))
  fi
done
# }}}

# Prepare tmp dir/path {{{
TMP_DIR=$(mktemp -d)
trap 'rm -rf "$TMP_DIR"' EXIT HUP INT QUIT ABRT SEGV TERM
export PATH=$inst_dir/bin:$PATH
# }}}

# Main loop {{{
for package in "${packages[@]}";do
  reset_inst_val
  conf="$conf_dir/${package}.sh"
  if [ ! -f "$conf" ];then
    err "No configuration file for $package is found."
    exit $EXIT_NO_PAC_CONF
  fi

  source "$conf"
  if [ "$version" = "" ];then
    err "version is not defined for $package."
    exit $EXIT_NO_VERSION
  fi

  if [ "${target}" = "" ];then
    target=${package}-${version}
  fi

  if [ -d "$stow_dir/$target" ];then
    if [ "$force" -eq 1 ];then
      cd_check "$stow_dir"
      stow -D "$target"
      rm -rf "$target"
    else
      if [ "$verbose" -eq 1 ];then
        banner "$target was already installed."
      fi
      cd_check "$stow_dir"
      stow --ignore="share/info/dir" "$target"
      continue
    fi
  fi

  cd_check "$TMP_DIR"

  banner "Installing $package"

  if [ "$verbose" -eq 1 ];then
    stow_install_wrapper
  else
    log=$(stow_install _wrapper2>&1)
  fi
  ret=$?

  if [ $ret -ne 0 ];then
    if [ "$verbose" -eq 0 ];then
      echo "$log"
    fi
    err "Failed to install $package"
    exit $ret
  fi

  cd_check "$stow_dir"

  if [ "$package" = "stow" ];then
    export PATH=$stow_dir/$target/bin:$PATH
  fi

  # Delte old stow
  #stow -D ${package}-*

  # Install. ignore share/info/dir which causes a conflict sometime.
  stow --ignore="share/info/dir" "$target"
  ret=$?
  if [ $ret -ne 0 ];then
    err "Failed to place by stow."
    exit $ret
  fi
done # }}}

# vim: foldmethod=marker
# vim: foldmarker={{{,}}}
